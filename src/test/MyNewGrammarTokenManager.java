/* Generated By:JJTree&JavaCC: Do not edit this line. MyNewGrammarTokenManager.java */
package test;
import util.*;
import java.io.*;

/** Token Manager. */
public class MyNewGrammarTokenManager implements MyNewGrammarConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x80000L) != 0L)
            return 4;
         if ((active0 & 0x2840000L) != 0L)
         {
            jjmatchedKind = 84;
            return 51;
         }
         if ((active0 & 0x5a3540064120000L) != 0L)
         {
            jjmatchedKind = 84;
            return 94;
         }
         if ((active1 & 0x4000000L) != 0L)
            return 115;
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            return 34;
         }
         if ((active0 & 0x8400000L) != 0L)
         {
            jjmatchedKind = 84;
            return 41;
         }
         if ((active0 & 0x81c800011000000L) != 0L)
         {
            jjmatchedKind = 84;
            return 149;
         }
         if ((active0 & 0x80000010000L) != 0L)
         {
            jjmatchedKind = 84;
            return 73;
         }
         if ((active0 & 0x88000L) != 0L)
         {
            jjmatchedKind = 84;
            return 131;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 84;
            return 62;
         }
         if ((active0 & 0x40200000000000L) != 0L)
         {
            jjmatchedKind = 84;
            return 85;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffc007d530000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 1;
            }
            return 94;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 1;
            }
            return 130;
         }
         if ((active0 & 0x20c0000L) != 0L)
            return 94;
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 1;
            }
            return 50;
         }
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 1;
            }
            return 61;
         }
         return -1;
      case 2:
         if ((active0 & 0x8000L) != 0L)
            return 132;
         if ((active0 & 0x800000000400000L) != 0L)
            return 94;
         if ((active0 & 0x7fffc007db70000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 2;
            return 94;
         }
         return -1;
      case 3:
         if ((active0 & 0xfffc0019a40000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 3;
            return 94;
         }
         if ((active0 & 0x700000064130000L) != 0L)
            return 94;
         return -1;
      case 4:
         if ((active0 & 0x1ffc0001840000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
            return 94;
         }
         if ((active0 & 0xe0000018200000L) != 0L)
            return 94;
         return -1;
      case 5:
         if ((active0 & 0x1f800001040000L) != 0L)
            return 94;
         if ((active0 & 0x7c0000800000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
            return 94;
         }
         return -1;
      case 6:
         if ((active0 & 0x400000800000L) != 0L)
            return 94;
         if ((active0 & 0x3c0000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
            return 94;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 80);
      case 35:
         return jjStopAtPos(0, 79);
      case 37:
         return jjStopAtPos(0, 91);
      case 38:
         return jjStopAtPos(0, 81);
      case 40:
         return jjStopAtPos(0, 72);
      case 41:
         return jjStopAtPos(0, 73);
      case 42:
         return jjStopAtPos(0, 89);
      case 43:
         return jjStopAtPos(0, 87);
      case 44:
         return jjStopAtPos(0, 70);
      case 45:
         return jjStopAtPos(0, 88);
      case 46:
         return jjStartNfaWithStates_0(0, 83, 4);
      case 47:
         return jjStartNfaWithStates_0(0, 90, 115);
      case 58:
         return jjStopAtPos(0, 71);
      case 59:
         return jjStopAtPos(0, 69);
      case 60:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 61:
         return jjStopAtPos(0, 78);
      case 62:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 91:
         return jjStopAtPos(0, 76);
      case 93:
         return jjStopAtPos(0, 77);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80040024000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2840000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x102000000100000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8400000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x88000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1100000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x81c800011000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40200000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x80000010000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 75);
      case 124:
         return jjStopAtPos(0, 82);
      case 125:
         return jjStopAtPos(0, 74);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20020000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100000800000L, active1, 0L);
      case 102:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 94);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x14200000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10800000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8100000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x140200000008000L, active1, 0L);
      case 111:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4800c0040450000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000004000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10100000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000001230000L);
      case 108:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 94);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80040040000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 94);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200020100000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 132);
         return jjMoveStringLiteralDfa3_0(active0, 0x603000000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000040000L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20080008800000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 94);
         break;
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 94);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 94);
         return jjMoveStringLiteralDfa4_0(active0, 0x2c00000000000L);
      case 103:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 94);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 109:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 94);
         break;
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 94);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L);
      case 111:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 94);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 94);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 94);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x8040001000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x5000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000001000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 94);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8040000000000L);
      case 107:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 94);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 94);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 94);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 94);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 94);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 94);
         break;
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 94);
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 102:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 94);
         break;
      case 104:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 94);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 94);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0x240000000000L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 94);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x300000000000L);
      case 102:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 94);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 94);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 94);
         break;
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 94);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 94);
         break;
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 160;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 47)
                     jjAddStates(7, 8);
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 39)
                     jjAddStates(12, 13);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(14, 16);
                  }
                  break;
               case 62:
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 115:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(121, 122);
                  else if (curChar == 47)
                     jjCheckNAddStates(17, 19);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(20, 22);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(12, 13);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 13)
                     kind = 13;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 21:
                  if ((0x8400002400L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 22:
                  if (curChar == 34 && kind > 14)
                     kind = 14;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if (curChar == 10)
                     jjCheckNAddStates(9, 11);
                  break;
               case 28:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 97);
                  break;
               case 97:
                  if (curChar != 46)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(27, 29);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(27, 29);
                  break;
               case 100:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(101);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(101, 8);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 104:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(105);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(105, 8);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 108:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(109);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(109, 8);
                  break;
               case 110:
                  if (curChar != 48)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(14, 16);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(112, 2);
                  break;
               case 113:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(113, 2);
                  break;
               case 114:
                  if (curChar == 47)
                     jjAddStates(7, 8);
                  break;
               case 116:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 117:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 118:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 119:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 121:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 122:
                  if (curChar == 42)
                     jjCheckNAddStates(33, 35);
                  break;
               case 123:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(124, 122);
                  break;
               case 124:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(124, 122);
                  break;
               case 125:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 83)
                     jjAddStates(36, 37);
                  else if (curChar == 115)
                     jjAddStates(38, 39);
                  else if (curChar == 73)
                     jjAddStates(40, 41);
                  else if (curChar == 105)
                     jjAddStates(42, 43);
                  else if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 91;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 85;
                  else if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 73;
                  else if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 67;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 62;
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 51;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 132:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 111)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 130:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 132;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 149:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 150;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 131:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 133;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(94);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(46, 48);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(49, 52);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 29:
                  if (curChar == 114 && kind > 31)
                     kind = 31;
                  break;
               case 30:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 82 && kind > 31)
                     kind = 31;
                  break;
               case 32:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 100 && kind > 32)
                     kind = 32;
                  break;
               case 35:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 68 && kind > 32)
                     kind = 32;
                  break;
               case 37:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 109 && kind > 33)
                     kind = 33;
                  break;
               case 40:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 77 && kind > 33)
                     kind = 33;
                  break;
               case 44:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 101 && kind > 34)
                     kind = 34;
                  break;
               case 48:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 52:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 69 && kind > 34)
                     kind = 34;
                  break;
               case 54:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 101 && kind > 35)
                     kind = 35;
                  break;
               case 60:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 63:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 69 && kind > 35)
                     kind = 35;
                  break;
               case 65:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 115 && kind > 38)
                     kind = 38;
                  break;
               case 70:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 74:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 83 && kind > 38)
                     kind = 38;
                  break;
               case 76:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 101 && kind > 40)
                     kind = 40;
                  break;
               case 82:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 86:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 69 && kind > 40)
                     kind = 40;
                  break;
               case 88:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(94);
                  break;
               case 99:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 103:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 107:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 111:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(112);
                  break;
               case 112:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(112, 2);
                  break;
               case 116:
                  jjAddStates(17, 19);
                  break;
               case 121:
                  jjCheckNAddTwoStates(121, 122);
                  break;
               case 123:
               case 124:
                  jjCheckNAddTwoStates(124, 122);
                  break;
               case 126:
                  if (curChar == 105)
                     jjAddStates(42, 43);
                  break;
               case 127:
                  if (curChar == 116 && kind > 36)
                     kind = 36;
                  break;
               case 128:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 133:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 73)
                     jjAddStates(40, 41);
                  break;
               case 136:
                  if (curChar == 84 && kind > 36)
                     kind = 36;
                  break;
               case 137:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 79 && kind > 37)
                     kind = 37;
                  break;
               case 142:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 115)
                     jjAddStates(38, 39);
                  break;
               case 145:
                  if (curChar == 116 && kind > 39)
                     kind = 39;
                  break;
               case 146:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 150:
                  if (curChar == 116 && kind > 41)
                     kind = 41;
                  break;
               case 151:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 83)
                     jjAddStates(36, 37);
                  break;
               case 153:
                  if (curChar == 84 && kind > 39)
                     kind = 39;
                  break;
               case 154:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 84 && kind > 41)
                     kind = 41;
                  break;
               case 159:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(9, 11);
                  break;
               case 116:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(17, 19);
                  break;
               case 121:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 123:
               case 124:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(124, 122);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 160 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   96, 97, 102, 103, 106, 107, 8, 115, 120, 19, 20, 22, 10, 12, 111, 113, 
   2, 116, 117, 119, 4, 5, 8, 19, 20, 24, 22, 98, 99, 8, 106, 107, 
   8, 122, 123, 125, 157, 159, 149, 151, 140, 143, 131, 134, 6, 7, 13, 14, 
   16, 21, 23, 25, 28, 100, 101, 104, 105, 108, 109, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\151\156\164", "\166\157\151\144", "\155\141\151\156", 
"\144\157\165\142\154\145", "\151\146", "\145\154\163\145", "\167\150\151\154\145", "\146\157\162", 
"\144\145\146\141\165\154\164", "\163\167\151\164\143\150", "\144\157", "\143\150\141\162", 
"\146\154\157\141\164", "\163\150\157\162\164", "\143\141\163\145", "\154\157\156\147", null, null, 
null, null, null, null, null, null, null, null, null, 
"\143\157\156\164\151\156\165\145", "\166\157\154\141\164\151\154\145", "\162\145\147\151\163\164\145\162", 
"\165\156\163\151\147\156\145\144", "\164\171\160\145\144\145\146", "\163\151\172\145\157\146", 
"\162\145\164\165\162\156", "\145\170\164\145\162\156", "\163\164\162\165\143\164", 
"\163\164\141\164\151\143", "\163\151\147\156\145\144", "\142\162\145\141\153", "\165\156\151\157\156", 
"\143\157\156\163\164", "\145\156\165\155", "\141\165\164\157", "\147\157\164\157", "\163\161\154", 
null, null, null, null, null, "\74", "\74\75", "\76", "\76\75", "\73", "\54", "\72", 
"\50", "\51", "\175", "\173", "\133", "\135", "\75", "\43", "\41", "\46", "\174", 
"\56", null, null, null, "\53", "\55", "\52", "\57", "\45", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffe881L, 0xf9ffffeL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[160];
private final int[] jjstateSet = new int[320];
protected char curChar;
/** Constructor. */
public MyNewGrammarTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public MyNewGrammarTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 160; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
