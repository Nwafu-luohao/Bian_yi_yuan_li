/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(MyNewGrammar)
package test;
import util.*;
import java.io.*;

public class MyNewGrammar
{
  public QTList qtList = new QTList();

  public StatementType ST = new StatementType();

  public VariableTable Vt = new VariableTable();

  public void printQTTable(char [] buffer, FileWriter fos)
  {
    qtList.printQTTable(buffer, fos);
  }

  public static void main(String args [])
  {
    try
    {
      File outFile = new File("output5.txt");
      FileWriter fos = new FileWriter(outFile);
      FileReader reader = new FileReader("input5.txt");
      FileReader reader1 = new FileReader("input5.txt");
      char [] buffer = new char [1000];
      MyNewGrammar parser = new MyNewGrammar(reader);
      // 词法分析
      Token t = null;
      SimpleCharStream stream = new SimpleCharStream(reader1);
      MyNewGrammarTokenManager tmg = new MyNewGrammarTokenManager(stream);
      t = tmg.getNextToken();
      System.out.println("\u8bcd\u6cd5\u5206\u6790:\n");
      String st = new String("\u8bcd\u6cd5\u5206\u6790:\n");
      buffer = st.toCharArray();
      fos.write(buffer); // 写入文件
      while (t.kind != 0)
      {
        System.out.println(t.kind + " --- " + t.image);
        st = new String(t.kind + " --- " + t.image + "\n");
        buffer = st.toCharArray();
        fos.write(buffer);
        t = tmg.getNextToken();
      }
      System.out.println("\n");
      // 语法分析
      System.out.println("\u8bed\u6cd5\u5206\u6790: ");
      st = new String("\n\u8bed\u6cd5\u5206\u6790:\n");
      buffer = st.toCharArray();
      fos.write(buffer); // 写入文件
      SimpleNode n = parser.Start();
      n.dump("", buffer, fos);
      st = new String("Thank you.\n\n");
      buffer = st.toCharArray();
      fos.write(buffer); // 写入文件
      System.out.println("Thank you.");
      System.out.println("\n");
      // 语义分析
      System.out.println("\u8bed\u4e49\u5206\u6790: \n");
      st = new String("\u8bed\u4e49\u5206\u6790: \n");
      buffer = st.toCharArray();
      fos.write(buffer); // 写入文件
      parser.printQTTable(buffer, fos);
      // 关闭并保存文件
      fos.close();
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      "*"
    | ~[ "*", "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN :
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
| < FLOATING_POINT_LITERAL :
    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ] >
| < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
| < CHARACTER_LITERAL :
    "\'"
    (
      ~[ "\'", "\\", "\n", "\r" ]
    | "\\"
      (
        [ "n", "t", "b", "r", "f", "\\", "\'", "\"" ]
      | [ "0"-"7" ] ([ "0"-"7" ])?
      | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
      )
    )
    "\'" >
| < STRING_LITERAL :
    "\""
    (
      ~[ "\"", "\\", "\n", "\r" ]
    | "\\"
      (
        [ "n", "t", "b", "r", "f", "\\", "\'", "\"" ]
      | [ "0"-"7" ] ([ "0"-"7" ])?
      | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
      |
        (
          [ "\n", "\r" ]
        | "\r\n"
        )
      )
    )*
    "\"" >
}

TOKEN :
{
  < INT : "int" >
| < VOID : "void" >
| < MAIN : "main" >
| < DOUBLE : "double" >
| < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < FOR : "for" >
| < DFLT : "default" >
| < SWITCH : "switch" >
| < DO : "do" >
| < CHAR : "char" >
| < FLOAT : "float" >
| < SHORT : "short" >
| < CASE : "case" >
| < LONG : "long" >
}

TOKEN :
{
  < OR :
    "or"
  | "OR" >
| 
  < AND :
    "and"
  | "AND" >
| 
  < FROM :
    "from"
  | "FROM" >
| 
  < DELETE :
    "delete"
  | "DELETE" >
| 
  < WHERE :
    (
      "where"
    | "WHERE"
    ) >
| 
  < INSERT :
    (
      "insert"
    | "INSERT"
    ) >
| 
  < INTO :
    "into"
  | "INTO" >
| 
  < VALUES :
    "values"
  | "VALUES" >
| 
  < SELECT :
    "select"
  | "SELECT" >
| 
  < UPDATE :
    "update"
  | "UPDATE" >
| 
  < SET :
    "set"
  | "SET" >
| 
  < CONTINUE : "continue" >
| 
  < VOLATILE : "volatile" >
| 
  < REGISTER : "register" >
| 
  < UNSIGNED : "unsigned" >
| 
  < TYPEDEF : "typedef" >
| 
  < SIZEOF : "sizeof" >
| 
  < RETURN : "return" >
| 
  < EXTERN : "extern" >
| 
  < STRUCT : "struct" >
| 
  < STATIC : "static" >
| 
  < SIGNED : "signed" >
| 
  < BREAK : "break" >
| 
  < UNION : "union" >
| 
  < CONST : "const" >
| 
  < ENUM : "enum" >
| 
  < AUTO : "auto" >
| 
  < GOTO : "goto" >
| 
  < SQL : "sql" >
}

TOKEN :
{
  < #_NUM_CHAR : [ "0"-"9" ] >
| < #_ESCAPED_CHAR : "\\" ~[ ] >
| < #_TERM_START_CHAR :
    (
      ~[ " ", "\t", "\n", "\r", "+", "-", "!", "(", ")", ":", "^", 
      "[", "]", "\"", "{", "}", "~", "*", "?", "\\" ]
    | < _ESCAPED_CHAR >
    ) >
| < #_TERM_CHAR :
    (
      < _TERM_START_CHAR >
    | < _ESCAPED_CHAR >
    | "-"
    | "+"
    ) >
| < #_WHITESPACE :
    (
      " "
    | "\t"
    | "\n"
    | "\r"
    ) >
}

TOKEN :
{
  < LT : "<" >
| < LE : "<=" >
| < GT : ">" >
| < GE : ">=" >
}

TOKEN : /*界符*/
{
  < SP : ";" >
| < DH : "," >
| < COLON : ":" >
| < LB : "(" >
| < RB : ")" >
| < YOUHUAKUO : "}" >
| < ZUOHUAKUO : "{" >
| < ZUOKUANGHAO : "[" >
| < YOUKUANGHAO : "]" >
| < DENGYUHAO : "=" >
| < JINHAO : "#" >
| < GANTAIHAO : "!" >
| < QUZHIFU : "&" >
| < HUOYUNSUANFU : "|" >
| < XIAOSHUDIAN : "." >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

SimpleNode Start() :
{}
{
  Program()
  {
    return jjtThis;
  }
}

void Program() :
{}
{
  Type() < MAIN > "(" ")" "{"
  (
    SentenceBlock()
  )*
  "}"
}

String Type() :
{
  Token t = null;
}
{
  t = < INT >
  {
    return t.image;
  }
| t = < DOUBLE >
  {
    return t.image;
  }
| t = < VOID >
  {
    return t.image;
  }
| t = < FLOAT >
  {
    return t.image;
  }
| t = < CHAR >
  {
    return t.image;
  }
| t = < LONG >
  {
    return t.image;
  }
| t = < SHORT >
  {
    return t.image;
  }
}

void SentenceBlock() :
{}
{
  Sentence()
| "{"
  (
    SentenceBlock()
  )*
  "}"
}

void Sentence() :
{}
{
  SequenceSentence()
| ConditionSentence()
| LoopSentence()
| DoWhile()
| SwitchSentence()
| forSentence()
}

void SequenceSentence() :
{}
{
  StatementSentence() ";"
| AssignmentSentence() ";"
| ReturnSentence() ";"
}

void ReturnSentence() :
{}
{
  < RETURN > Expression()
}

// 变量重复声明
void StatementSentence() :
{
  Token to = null;
  Variable va = new Variable();
  String ty = null;
}
{
  ty = Type() 
  to = Identifier()
  {
    va = new Variable(ty, to);
    Vt.addWithCheck(va);
    ST.setVariableTable(Vt);
  }
  (
    < DH > 
    to = Identifier()
    {
      va = new Variable(ty, to);
      Vt.addWithCheck(va);
      ST.setVariableTable(Vt);
    }
  )*
}

void AssignmentSentence() :
{
  String str2 = null;
  String str1 = null;
  Token op, to;
  Variable va = new Variable();
}
{
  to = Identifier()
  {
    str1 = to.image;
  }
  {
    va = Vt.variableExist(str1);
    if (va == null)
    {
      System.out.println("\u53d8\u91cf" + str1 + "\u672a\u5b9a\u4e49");
    }
  }
  op = "=" 
  str2 = Expression()
  {
    QTInfo qt = new QTInfo(op.image, str2, "_", str1);
    qtList.addQTInfo(qt);
  }
}

void AssignmentSentence2() :
{
  String str2 = null;
  String str1 = null;
  Token op, to;
  Variable va = new Variable();
}
{
  to = Identifier()
  {
    str1 = to.image;
  }
  {
    va = Vt.variableExist(str1);
    if (va == null)
    {
      System.out.println("\u53d8\u91cf" + str1 + "\u672a\u5b9a\u4e49");
    }
  }
  op = "=" 
  str2 = Expression()
  {
    QTInfo qt = new QTInfo(op.image, str2, "_", str1);
    qtList.addQTInfo(qt);
  }
}

void ConditionSentence() :
{
  ConditionValue cValue = new ConditionValue();
  int index;
}
{
  < IF > "(" cValue = Condition() ")"
  {
    cValue.backpatchTrueChain(QTInfo.size + 1);
  }
  SentenceBlock()
  {
    cValue.backpatchFalseChain(QTInfo.size + 1);
  }
  (
    LOOKAHEAD(1)
    < ELSE >
    {
      QTInfo qtInfo = new QTInfo("j", "_", "_", "F");
      index = QTInfo.size;
      qtList.addQTInfo(qtInfo);
      cValue.backpatchFalseChain(QTInfo.size + 1);
    }
    SentenceBlock()
    {
      qtInfo = qtList.get(index - 1);
      qtInfo.setResult(QTInfo.size + 1);
    }
  )?
}

void LoopSentence() :
{
  ConditionValue cValue = new ConditionValue();
  int index;
}
{
  < WHILE > "("
  {
    index = QTInfo.size + 1;
  }
  cValue = Condition() ")"
  {
    cValue.backpatchTrueChain(QTInfo.size + 1);
  }
  SentenceBlock()
  {
    QTInfo qtInfo = new QTInfo("j", "_", "_", index);
    qtList.addQTInfo(qtInfo);
    cValue.backpatchFalseChain(QTInfo.size + 1);
  }
}

ConditionValue Condition() :
{
  String e1 = null;
  String e2 = null;
  Token r = null;
  ConditionValue cValue = new ConditionValue();
}
{
  (
    e1 = Expression()
  )?
  (
    r = Rop() e2 = Expression()
  )?
  {
    if (r == null || e1 == null)
    {
      if (e1 == null)
      {
        QTInfo qtInfo = new QTInfo("jnz", "_", "_", "T");
        qtList.addQTInfo(qtInfo);
        cValue.mergeTrue(qtInfo);
      }
      else
      {
        QTInfo qtInfo = new QTInfo("jnz", e1, "_", "T");
        qtList.addQTInfo(qtInfo);
        cValue.mergeTrue(qtInfo);
      }
    }
    else
    {
      QTInfo qtInfo = new QTInfo("j" + r.image, e1, e2, "T");
      qtList.addQTInfo(qtInfo);
      cValue.mergeTrue(qtInfo);
    }
    QTInfo qtInfo = new QTInfo("j", "_", "_", "F");
    qtList.addQTInfo(qtInfo);
    cValue.mergeFalse(qtInfo);
  }
  {
    return cValue;
  }
}

Token Rop() :
{
  Token t = null;
}
{
  t = < LT >
  {
    return t;
  }
| t = < LE >
  {
    return t;
  }
| t = < GT >
  {
    return t;
  }
| t = < GE >
  {
    return t;
  }
}

String Expression() :
{
  String s = null;
}
{
  s = AdditiveExpression()
  {
    return s;
  }
}

String AdditiveExpression() :
{
  String a = null;
  String b = null;
  String result = null;
  Token t = null;
}
{
  a = MultiplicativeExpression()
  {
    result = a;
  }
  (
    (
      t = "+"
    | t = "-"
    )
    b = MultiplicativeExpression()
    {
      result = VariableNameGenerator.genVariableName();
      QTInfo qtInfo = new QTInfo(t.image, a, b, result);
      qtList.addQTInfo(qtInfo);
      a = result;
    }
  )*
  {
    return result;
  }
}

String MultiplicativeExpression() :
{
  String a = null;
  String b = null;
  String result = null;
  Token t = null;
}
{
  a = UnaryExpression()
  {
    result = a;
  }
  (
    (
      t = "*"
    | t = "/"
    | t = "%"
    )
    b = UnaryExpression()
    {
      result = VariableNameGenerator.genVariableName();
      QTInfo qtInfo = new QTInfo(t.image, a, b, result);
      qtList.addQTInfo(qtInfo);
      a = result;
    }
  )*
  {
    return result;
  }
}

String UnaryExpression() :
{
  String str = null;
  Token to = null;
  Variable va = new Variable();
}
{
  (
    "(" str = Expression() ")"
  | to = Identifier()
    {
      str = to.image;
      va = Vt.variableExist(str);
      if (va == null)
      {
        System.out.println("\u53d8\u91cf" + str + "\u672a\u5b9a\u4e49");
      }
    }
  | str = Integer()
  )
  {
    return str;
  }
}

Token Identifier() :
{
  Token t = null;
}
{
  t = < IDENTIFIER >
  {
    return t;
  }
}

String Integer() :
{
  Token t = null;
}
{
  t = < INTEGER_LITERAL >
  {
    return t.image;
  }
}

ConditionValue Booler() :
{
  ConditionValue Value = new ConditionValue();
  String str1 = null, str2 = null;
  Token op = null;
  Token op1 = null;
  ConditionValue Value2 = new ConditionValue();
  ConditionValue Valuet = new ConditionValue();
  int qtSize = QTInfo.size;
  QTInfo qt1;
  QTInfo qt2;
}
{
  str1 = Expression()
  (
    op = Rop() str2 = Expression()
  )?
  {
    if (op != null)
    {
      qt1 = new QTInfo("J" + op.image, str1, str2, QTInfo.size + 3);
      qtList.addQTInfo(qt1);
    }
    else
    {
      qt1 = new QTInfo("Jnz", str1, "_", QTInfo.size + 3);
      qtList.addQTInfo(qt1);
    }
    qt2 = new QTInfo("J", "_", "_", "F");
    qtList.addQTInfo(qt2);
    Value.mergeFalse(qt2);
  }
  (
    (
      op1 = < AND >
      {
        Valuet = new ConditionValue();
        Valuet.mergeFalse(qt2);
        Value.backpatchTrueChain(QTInfo.size + 1);
      }
    |
      (
        op1 = < OR >
        {
          Valuet.mergeFalse(qt2);
          Valuet.backpatchFalseChain(QTInfo.size + 1);
          Value.backpatchFalseChain(QTInfo.size + 1);
        }
      )
    )
    Value2 = Booler()
    {
      if (op1.image.equals("&&"))
      {
        Value2.mergeFalse(qt2);
        Value2.backpatchFalseChain(QTInfo.size + 1);
      }
      if (op1.image.equals("||"))
      {
        Value2.mergeTrue(qt1);
        Value2.backpatchTrueChain(QTInfo.size + 1);
      }
      return Value2;
    }
  )?
  {
    return Value;
  }
}

void SwitchSentence() :
{
  ConditionValue Value = new ConditionValue();
  String str1 = null;
  String str2 = null;
  int qtSize = QTInfo.size;
  Token tok;
  Token tokx;
}
{
  < SWITCH > 
  < LB > 
  tok = < IDENTIFIER > 
  < RB > 
  < ZUOHUAKUO >
  (
    < CASE > 
    tokx = < INTEGER_LITERAL >
    {
      QTInfo qt1;
      if (tokx != null)
      {
        qt1 = new QTInfo("case", tok.image, tokx.image, QTInfo.size + 3);
        qtList.addQTInfo(qt1);
        Value.backpatchFalseChain(QTInfo.size);
        Value = new ConditionValue();
      }
      else
      {
        qt1 = new QTInfo("Jnz", tok.image, "_", QTInfo.size + 3);
        qtList.addQTInfo(qt1);
      }
      QTInfo qt2 = new QTInfo("J", "_", "_", "F");
      qtList.addQTInfo(qt2);
      Value.mergeFalse(qt2);
      Value.backpatchFalseChain(QTInfo.size + 2);
    }
    < COLON >
    (
      SentenceBlock()
    )*
    < BREAK > 
    < SP >
  )*
  [
    < DFLT > < COLON > 
    [ SentenceBlock() ] 
    < BREAK > 
    < SP >
  ]
  < YOUHUAKUO >
}

void DoWhile() :
{
  int QTSize = QTInfo.size;
  ConditionValue Value = null;
  String str1 = null;
  String str2 = null;
  Token op = null;
}
{
  < DO >
  (
    SentenceBlock()
  )
  < WHILE > 
  < LB > 
  Value = Booler() 
  < RB > 
  < SP >
  {
    Value.backpatchTrueChain(QTSize + 1);
  }
  {
    Value.backpatchFalseChain(QTInfo.size + 1);
  }
}

void forSentence() :
{
  ConditionValue cValue = new ConditionValue();
  int index;
}
{
  < FOR > "("
  {
    index = QTInfo.size + 1;
  }
  (
    StatementSentence()
  | AssignmentSentence2()
  )?
  < SP > 
  cValue = Condition() 
  < SP >
  (
    AssignmentSentence2()
  )*
  ")"
  {
    cValue.backpatchTrueChain(QTInfo.size + 1);
  }
  SentenceBlock()
  {
    QTInfo qtInfo = new QTInfo("j", "_", "_", index);
    qtList.addQTInfo(qtInfo);
    cValue.backpatchFalseChain(QTInfo.size + 1);
  }
}
